{
    "id": "zCyhvsLIt38TrBMq71Oa",
    "name": "Operator flow overview",
    "dod": "",
    "description": "In this unit we will go through our k8s operator main flow and learn what each step does.",
    "summary": "Hope you enjoyed going over this unit and leared something new :)",
    "hunksOrder": [
        "controllers/rookout_controller.go_0",
        "api/v1alpha1/rookout_types.go_1",
        "api/v1alpha1/rookout_types.go_0",
        "controllers/rookout_controller.go_1",
        "controllers/rookout_controller.go_2",
        "controllers/rookout_controller.go_3",
        "controllers/rookout_controller.go_4",
        "controllers/rookout_controller.go_5"
    ],
    "tests": [],
    "hints": [],
    "play_mode": "walkthrough",
    "swimmPatch": {
        "controllers/rookout_controller.go": {
            "diffType": "MODIFIED",
            "fileDiffHeader": "diff --git a/controllers/rookout_controller.go b/controllers/rookout_controller.go\nindex d085a45..d085a45 100644\n--- a/controllers/rookout_controller.go\n+++ b/controllers/rookout_controller.go",
            "hunks": [
                {
                    "swimmHunkMetadata": {
                        "hunkComments": [
                            "Here we define our operator required permissions"
                        ]
                    },
                    "hunkDiffLines": [
                        "@@ -46,11 +46,6 @@",
                        " // !!!!!!!!!!!!!!!!!!!!",
                        " // Operator permissions - make sure we don't have unused permissions here",
                        " // !!!!!!!!!!!!!!!!!!!!",
                        "-// +kubebuilder:rbac:groups=rookout.rookout.com,resources=rookouts,verbs=get;list;watch;create;update;patch;delete",
                        "-// +kubebuilder:rbac:groups=rookout.rookout.com,resources=rookouts/status,verbs=get;update;patch",
                        "-// +kubebuilder:rbac:groups=rookout.rookout.com,resources=rookouts/finalizers,verbs=update",
                        "-// +kubebuilder:rbac:groups=\"apps\",resources=deployments,verbs=get;watch;list;patch",
                        "-",
                        " // This Reconcile function handles the following resources:",
                        " // - Rookout",
                        " // - Deployment"
                    ]
                },
                {
                    "swimmHunkMetadata": {
                        "hunkComments": [
                            "Here is the Operator entry point (AKA reconcile loop)"
                        ]
                    },
                    "hunkDiffLines": [
                        "@@ -56,7 +51,6 @@",
                        " // - Deployment",
                        " //",
                        " // the common design pattern is that each reconcile should handle only one resource type",
                        "-func (r *RookoutReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {",
                        " \toperatorConfiguration := rookoutv1alpha1.Rookout{}",
                        " \terr := r.Client.Get(ctx, req.NamespacedName, &operatorConfiguration)",
                        " "
                    ]
                },
                {
                    "swimmHunkMetadata": {
                        "hunkComments": [
                            "Here we check if the resource that triggered our reconcile function is a configuration resource and if so we sync our internal configuration state with its values"
                        ]
                    },
                    "hunkDiffLines": [
                        "@@ -57,20 +51,6 @@",
                        " //",
                        " // the common design pattern is that each reconcile should handle only one resource type",
                        " func (r *RookoutReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {",
                        "-\toperatorConfiguration := rookoutv1alpha1.Rookout{}",
                        "-\terr := r.Client.Get(ctx, req.NamespacedName, &operatorConfiguration)",
                        "-",
                        "-\tif err == nil {",
                        "-\t\tOpState.IsReady = true",
                        "-\t\tOpState.RookoutEnvVars = operatorConfiguration.Spec.RookoutEnvVars",
                        "-\t\tOpState.Matchers = operatorConfiguration.Spec.Matchers",
                        "-\t\tlogrus.Info(\"operator configuration updated\")",
                        "-\t\treturn ctrl.Result{}, nil",
                        "-\t}",
                        "-",
                        "-\tif !OpState.IsReady {",
                        "-\t\treturn ctrl.Result{Requeue: true, RequeueAfter: REQUEUE_AFTER}, nil",
                        "-\t}",
                        " ",
                        " \tdeployment := apps.Deployment{}",
                        " \terr = r.Client.Get(ctx, req.NamespacedName, &deployment)"
                    ]
                },
                {
                    "swimmHunkMetadata": {
                        "hunkComments": [
                            "Here we check if we a deployment resource triggered our reconcile function and if so we patch the deployment to include Rookout's agent"
                        ]
                    },
                    "hunkDiffLines": [
                        "@@ -72,18 +52,6 @@",
                        " \t\treturn ctrl.Result{Requeue: true, RequeueAfter: REQUEUE_AFTER}, nil",
                        " \t}",
                        " ",
                        "-\tdeployment := apps.Deployment{}",
                        "-\terr = r.Client.Get(ctx, req.NamespacedName, &deployment)",
                        "-",
                        "-\tif err != nil {",
                        "-\t\tif !strings.Contains(err.Error(), \"not found\") {",
                        "-\t\t\tlogrus.Errorf(\"error during deployment fetch - %s\", err.Error())",
                        "-\t\t}",
                        "-\t\treturn ctrl.Result{}, nil",
                        "-\t}",
                        "-",
                        "-\terr = r.patchDeployment(ctx, &deployment)",
                        "-",
                        " \tif err != nil {",
                        " \t\treturn ctrl.Result{}, err",
                        " \t}"
                    ]
                },
                {
                    "swimmHunkMetadata": {
                        "hunkComments": [
                            "Here we make sure the deployment not already patched"
                        ]
                    },
                    "hunkDiffLines": [
                        "@@ -102,12 +70,6 @@",
                        " func (r *RookoutReconciler) patchDeployment(ctx context.Context, deployment *apps.Deployment) error {",
                        " \tshouldPatch := false",
                        " ",
                        "-\tfor _, initContainer := range deployment.Spec.Template.Spec.InitContainers {",
                        "-\t\tif initContainer.Name == AGENT_INIT_CONTAINER_NAME {",
                        "-\t\t\treturn nil",
                        "-\t\t}",
                        "-\t}",
                        "-",
                        " \toriginalDeployment := client.MergeFrom(deployment.DeepCopy())",
                        " ",
                        " \tvar updatedContainers []v1.Container"
                    ]
                },
                {
                    "swimmHunkMetadata": {
                        "hunkComments": [
                            "It's important to keep a copy of the unpatched deployment so kubernetes will know how to merge our changes to it later."
                        ]
                    },
                    "hunkDiffLines": [
                        "@@ -108,7 +70,6 @@",
                        " \t\t}",
                        " \t}",
                        " ",
                        "-\toriginalDeployment := client.MergeFrom(deployment.DeepCopy())",
                        " ",
                        " \tvar updatedContainers []v1.Container",
                        " \tfor _, container := range deployment.Spec.Template.Spec.Containers {"
                    ]
                }
            ]
        },
        "api/v1alpha1/rookout_types.go": {
            "diffType": "MODIFIED",
            "fileDiffHeader": "diff --git a/api/v1alpha1/rookout_types.go b/api/v1alpha1/rookout_types.go\nindex 08ac52b..08ac52b 100644\n--- a/api/v1alpha1/rookout_types.go\n+++ b/api/v1alpha1/rookout_types.go",
            "hunks": [
                {
                    "swimmHunkMetadata": {
                        "hunkComments": [
                            "Here we define the Spec section of our API"
                        ]
                    },
                    "hunkDiffLines": [
                        "@@ -17,11 +17,6 @@",
                        " }",
                        " ",
                        " // RookoutSpec defines the desired state of Rookout",
                        "-type RookoutSpec struct {",
                        "-\tMatchers       []Matcher   `json:\"matchers,omitempty\"`",
                        "-\tRookoutEnvVars []v1.EnvVar `json:\"rookout_env_vars,omitempty\"`",
                        "-}",
                        "-",
                        " // RookoutStatus defines the observed state of Rookout",
                        " type RookoutStatus struct {",
                        " \t// TODO: consider using this objet to represent our operator state"
                    ]
                },
                {
                    "swimmHunkMetadata": {
                        "hunkComments": [
                            "Here we define our operator configuration resource"
                        ]
                    },
                    "hunkDiffLines": [
                        "@@ -32,14 +27,6 @@",
                        " // +kubebuilder:subresource:status",
                        " ",
                        " // Rookout is the Schema for the rookouts API",
                        "-type Rookout struct {",
                        "-\tmetav1.TypeMeta   `json:\",inline\"`",
                        "-\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`",
                        "-",
                        "-\tSpec   RookoutSpec   `json:\"spec,omitempty\"`",
                        "-\tStatus RookoutStatus `json:\"status,omitempty\"`",
                        "-}",
                        "-",
                        " // +kubebuilder:object:root=true",
                        " ",
                        " // RookoutList contains a list of Rookout"
                    ]
                }
            ]
        }
    },
    "app_version": "0.3.5-1",
    "file_version": "1.0.4",
    "last_commit_sha_for_swimm_patch": "6ec7c9e6fa9bfef9f69cacf7f1b668f60241266d"
}